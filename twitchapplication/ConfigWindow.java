package twitchapplication;

import java.awt.Color;
import java.awt.Desktop;
import java.net.URI;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import twitchapplication.UpdateUtility.UpdateStatus;

public class ConfigWindow extends javax.swing.JFrame {

    private TwitchController twc;
    
    /**
     * Creates new form ConfigWindow
     */
    public ConfigWindow(TwitchController twc) {
        this.setUndecorated(true);
        initComponents();
        this.getContentPane().setBackground(Color.LIGHT_GRAY);
        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        this.twc = twc;
    }
    
    
    public HashMap<String, String> getProperties(){
        HashMap<String, String> saveProps = new HashMap<>();
        saveProps.put("DisableNotifications", ""+remTrayCheckbox.isSelected());
        saveProps.put("RememberUser", ""+remUsernameCheckbox.isSelected());
        saveProps.put("StartMinimized", ""+startMinimizedCheckbox.isSelected());
        saveProps.put("RememberPosition", ""+remPositionCheckbox.isSelected());
        saveProps.put("TimerUpdate", ""+getTimeout());
        saveProps.put("AutoLogin", ""+autoLoginCheckbox.isSelected());
        saveProps.put("PopoutVideo", ""+popoutVideoCheckbox.isSelected());
        saveProps.put("UndecoratedWindow", ""+decoratedCheckbox.isSelected());
        saveProps.put("PosX", this.getX()+"");
        saveProps.put("PosY", this.getY()+183+"");
        saveProps.put("PromptForUpdate", ""+updateCheckbox.isSelected());
        return saveProps;
    }
    
    public void setAppVersion() {
        String versionNumber = twc.getAppVersion();
//        if(UpdateUtility.getInstance().getUpdateAvailable(versionNumber)) {
//            System.out.println("yolo"); // add warning / error icon, paint in bold, add tooltip
//        }
        versionLabel.setText("Ver. "+versionNumber);
    }
    
    public void enterProperties(HashMap<String, String> enterMap){
        remTrayCheckbox.setSelected(Boolean.parseBoolean(enterMap.get("DisableNotifications")));
        remUsernameCheckbox.setSelected(Boolean.parseBoolean(enterMap.get("RememberUser")));
        startMinimizedCheckbox.setSelected(Boolean.parseBoolean(enterMap.get("StartMinimized")));
        remPositionCheckbox.setSelected(Boolean.parseBoolean(enterMap.get("RememberPosition")));
        updateCheckbox.setSelected(Boolean.parseBoolean(enterMap.get("PromptForUpdate")));
        if(remUsernameCheckbox.isSelected()){
            autoLoginCheckbox.setSelected(Boolean.parseBoolean(enterMap.get("AutoLogin")));
        }
        System.out.println(Boolean.parseBoolean(enterMap.get("UndecoratedWindow")));
        boolean b = Boolean.parseBoolean(enterMap.get("UndecoratedWindow"));
        decoratedCheckbox.setSelected(!b);
        popoutVideoCheckbox.setSelected(Boolean.parseBoolean(enterMap.get("PopoutVideo")));
        decoratedCheckbox.setSelected(Boolean.parseBoolean(enterMap.get("UndecoratedWindow")));
        
        if(remUsernameCheckbox.isSelected()){
            if(autoLoginCheckbox.isSelected()){
                remUsernameCheckbox.setEnabled(false);
                autoLoginCheckbox.setEnabled(true);
                return;
            }
            autoLoginCheckbox.setEnabled(true);
            remUsernameCheckbox.setEnabled(true);
        }
    }

    public int getTimeout(){
        int x;
        switch(timerChangeList.getSelectedIndex()){
            case 0:
                x=15;
                break;
            case 1:
                x=30;
                break;
            case 2:
                x=60;
                break;
            case 3:
                x=120;
                break;
            default:
                x=30;
                break;
        }
        return x;
    }
    
    public void setTimeout(int timeout){
        switch(timeout){
            case 15:
               timerChangeList.setSelectedIndex(0);
                break;
            case 30:
               timerChangeList.setSelectedIndex(1);
                break;
            case 60:
               timerChangeList.setSelectedIndex(2);
                break;
            case 120:
               timerChangeList.setSelectedIndex(3);
                break;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resizeButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        popoutVideoCheckbox = new javax.swing.JCheckBox();
        timerChangeList = new javax.swing.JComboBox();
        timerChangeButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        remUsernameCheckbox = new javax.swing.JCheckBox();
        remTrayCheckbox = new javax.swing.JCheckBox();
        decoratedCheckbox = new javax.swing.JCheckBox();
        remPositionCheckbox = new javax.swing.JCheckBox();
        autoLoginCheckbox = new javax.swing.JCheckBox();
        startMinimizedCheckbox = new javax.swing.JCheckBox();
        resetButton = new javax.swing.JButton();
        versionLabel = new javax.swing.JLabel();
        updateLinkPanel = new javax.swing.JPanel();
        updateCheckbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resizeButton.setText("Back to origin");
        resizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "List Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 10), new java.awt.Color(0, 0, 0))); // NOI18N

        popoutVideoCheckbox.setText("Popout Video");
        popoutVideoCheckbox.setToolTipText("Checing this option opens the stream in the \"popout\" window");
        popoutVideoCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popoutVideoCheckboxActionPerformed(evt);
            }
        });

        timerChangeList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "15 secs", "30 secs", "1 minute", "2 minutes" }));

        timerChangeButton.setText("Set update timer");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(timerChangeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(timerChangeList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(popoutVideoCheckbox))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(popoutVideoCheckbox)
                .addGap(9, 9, 9)
                .addComponent(timerChangeList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timerChangeButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "General", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 10), new java.awt.Color(0, 0, 0))); // NOI18N

        remUsernameCheckbox.setText("Remember username");
        remUsernameCheckbox.setEnabled(false);
        remUsernameCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remUsernameCheckboxActionPerformed(evt);
            }
        });

        remTrayCheckbox.setText("Disable tray notifcations");

        decoratedCheckbox.setText("Hide Window Border");
        decoratedCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decoratedCheckboxActionPerformed(evt);
            }
        });

        remPositionCheckbox.setText("Remember position");

        autoLoginCheckbox.setText("Auto login");
        autoLoginCheckbox.setEnabled(false);
        autoLoginCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoLoginCheckboxActionPerformed(evt);
            }
        });

        startMinimizedCheckbox.setText("Start minimized");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(remUsernameCheckbox)
                    .addComponent(remTrayCheckbox)
                    .addComponent(decoratedCheckbox)
                    .addComponent(remPositionCheckbox)
                    .addComponent(autoLoginCheckbox)
                    .addComponent(startMinimizedCheckbox))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(remUsernameCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoLoginCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startMinimizedCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(remTrayCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(remPositionCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decoratedCheckbox))
        );

        resetButton.setText("Reset Settings");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        versionLabel.setText("Current version:");
        versionLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                versionLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout updateLinkPanelLayout = new javax.swing.GroupLayout(updateLinkPanel);
        updateLinkPanel.setLayout(updateLinkPanelLayout);
        updateLinkPanelLayout.setHorizontalGroup(
            updateLinkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        updateLinkPanelLayout.setVerticalGroup(
            updateLinkPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 19, Short.MAX_VALUE)
        );

        updateCheckbox.setText("Prompt For Updates");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resizeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(updateLinkPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(versionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateCheckbox))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateCheckbox))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(resizeButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(resetButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(updateLinkPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(versionLabel))
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeButtonActionPerformed
        twc.resetLocation();
        twc.showConfigWindow(false);
    }//GEN-LAST:event_resizeButtonActionPerformed

    private void remUsernameCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remUsernameCheckboxActionPerformed
        autoLoginCheckbox.setEnabled(true);
    }//GEN-LAST:event_remUsernameCheckboxActionPerformed

    
    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        TwitchApplication.getInstance().deleteParams();
        twc.showMessage(MessageState.INFO, "Will try to delete config file");
    }//GEN-LAST:event_resetButtonActionPerformed

    private void popoutVideoCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popoutVideoCheckboxActionPerformed
        twc.enablePopoutLinks(popoutVideoCheckbox.isSelected());
    }//GEN-LAST:event_popoutVideoCheckboxActionPerformed

    private void autoLoginCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoLoginCheckboxActionPerformed
        remUsernameCheckbox.setEnabled(!autoLoginCheckbox.isSelected());
    }//GEN-LAST:event_autoLoginCheckboxActionPerformed

    private void decoratedCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decoratedCheckboxActionPerformed
        twc.showMessage(MessageState.INFO, "Restart program for change to take effect.");
    }//GEN-LAST:event_decoratedCheckboxActionPerformed

    
    private boolean newVersion = false;
    private void versionLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_versionLabelMouseClicked
        if(newVersion) {
            promptUser();
        }
    }//GEN-LAST:event_versionLabelMouseClicked

    private void promptUser(){
        if(JOptionPane.showConfirmDialog(this, "New update found, open update page in browser?", "Twitch Notifier", JOptionPane.YES_NO_OPTION) == 0){
            try {
                Desktop.getDesktop().browse(new URI(UpdateUtility.getInstance().getUpdateUrl()));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Unable to open browser, please go to the following website to update manually:+\n"+UpdateUtility.getInstance().getUpdateUrl());
            }
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoLoginCheckbox;
    private javax.swing.JCheckBox decoratedCheckbox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JCheckBox popoutVideoCheckbox;
    private javax.swing.JCheckBox remPositionCheckbox;
    private javax.swing.JCheckBox remTrayCheckbox;
    private javax.swing.JCheckBox remUsernameCheckbox;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton resizeButton;
    private javax.swing.JCheckBox startMinimizedCheckbox;
    private javax.swing.JButton timerChangeButton;
    private javax.swing.JComboBox timerChangeList;
    private javax.swing.JCheckBox updateCheckbox;
    private javax.swing.JPanel updateLinkPanel;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables

    public void allowUsernameToBeRemembered(boolean b) {
        remUsernameCheckbox.setEnabled(b);
        if(autoLoginCheckbox.isSelected()){
            remUsernameCheckbox.setEnabled(false);
        }
        if(!b){
            remUsernameCheckbox.setSelected(false);
            autoLoginCheckbox.setEnabled(false);
            autoLoginCheckbox.setSelected(false);
        }
    }
    
    public void setUpdate(UpdateStatus status, boolean prompt) {
        javax.swing.ImageIcon labelIcon = null;
        String tooltip = "";
        updateLinkPanel.setLayout(new java.awt.GridLayout(1, 1));
        switch(status) {
            case NO_UPDATE:
                labelIcon = twc.getView().getIcon(MessageState.BLANK);
                tooltip = "No new update";
                break;
            case NEW_UPDATE:
                labelIcon = twc.getView().getIcon(MessageState.INFO);
                tooltip = "New update found!";
                newVersion = true;
                if(updateCheckbox.isSelected() && prompt) promptUser();
                break;
            case TIMEOUT_UPDATE:
                labelIcon = twc.getView().getIcon(MessageState.WARNING);
                tooltip = "Version server response timed out...";
                break;
            case INVALID_RESPONSE:
                labelIcon = twc.getView().getIcon(MessageState.ERROR);
                tooltip = "Received invalid server response!";
            default:
                System.out.println(status);
        }
        versionLabel.setToolTipText(tooltip);
        versionLabel.setIcon(labelIcon);
    }
}
